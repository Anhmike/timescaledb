sudo: required
language: c
os:
  - linux
services:
  - docker
notifications:
  slack:
    if: (type = cron) AND (branch = master)
    on_success: change
    on_failure: always
    template:
      - "<!here>"
      - "%{repository_slug} (%{build_number}) : %{message}"
      - "Last commit: %{commit_subject} by %{author}"
      - "Build details: %{build_url}"
    rooms:
      - secure: "n4gHRucKsrlYNLVmoTxhsSbH780+8c+OjUCbaSxzyf7QYpbiD5HdCYAwBwJw6VkWPHQ+gXXy75szzcBmCOILEqx+m8WBLet+K9Kw1g3EE0r7lXT+OLWi0JJXvWBv/QdMwefilg7mC8P/USEwUSZfK/iW7tERvQc38ajGonqTsS4QWSg9zAlZZ1ZQJAALd4S4z+BJ/skAQNV+hAI1DLb8jf3A+Ex4/uMs9oAmfGiKqQTwmHlL698XFD83bv0XdxJYskkL8Eqt+19d0HD7lTCvez0yES2PCRXUWsWd2mIwTzGPYyDAU+5MifUvV2CaGDDAhIpzTYoZ4rl2SJc4uu6Fztat4UQB1GGc+TCNo5V8L3IdmzGjI2NSk88QItvpSiiNvtS0mr5As9dO8pIwuWwc4SL0u5bYw7Cq+y2s85huhKrYFVkdEptxjGInHjmq0KsuqpHoFE3E2DPD0fR0KhOekFkzobXg1cPubWHOmzm/PhVaMz3tFAtg83V2f+qg3UtfjMMgI84J/SsUdqv9J1G9R2iGxi56WKSWHHyMeloY8Pz2HFJzV0fPJQM+D5pJFpxQkSXyOMR72qJjeg0IZTiCndX9AEswbGQ3d/dwmYgbfzAah+OP37ZTYyEOsqJTEKvWq8GuJZTuhdJhhvA38Axv9jACcoQtxTKdKskOAUH3TWA="
env:
  global:
    - RETRY_PREFIX=$(if [ "${TRAVIS_PULL_REQUEST}" = "false" ]; then echo "travis_retry"; else echo ""; fi)
    - secure: "jy4DQH2syPR2v13igCNPTr044h3H/ilbJk6FifDMxGZVrOZR0dnkBx3O7qJMQOkEQvNxKsoq41k6HCP16qcgt4+HjxhcZonz5hKIiF8IpcB9r+TIlZunNTx7HjSNFZ3WCnham4AvMEthBHgAttRUhscy39ELCNUEobKS/youi7OHLOEXXShc84yTh3aSuGR3SnDVK1diLN5ufX6tN20pc3QvLMGZmA/jmJFcIQHGilhWGwwiJ45LSLwM9slvgGKbTM/K6btVBMOUnjM0h5WqPjRjDUL2tF+iZLEIpY8lFN/MQCnj0vP/BryDdoVPZS3TDQYwYuvASevQ4sOmULnM770jFqzClq4zkeM2GhMq67aYMmXjblu/qcLeCjZL+vfjMKpBMUydK/bCb097HvdRWDEPA0zItKWX9Kd6lVf2XbJCCh0ljp5REJEyk+plJ2V12nLpOPwY6zTtzcoTxEN6wcvUJfHAdNovpp63hWTnbAbEZamIdxwyCqpzThDobeD354TeXFUaKvrUw00iAiIhGL2QvwapaCbhlwM6NQAmdU3tMy3nZpka6bRI1kjyTh7CXfdwXV98ZJSiPdUFxyIgFNI2dKiL3BI1pvFDfq3mnmi3WqzZHCaQqDKNEtUrzxC40swIJGLcLUiqc5xX37P47jNDWrNIRDs8IdbM0tS9pFM="

jobs:
  include:

    # This tests the ability to upgrade to the latest version on pg 11
    - if: (type = pull_request) OR (type = cron) OR (branch = prerelease_test)
      stage: test
      env: PG_VERSION=11.0
      name: "Update tests PostgreSQL 11.0"
      before_install:
      install:
      after_failure:
      after_script:
      after_success:
      script:
        - ${RETRY_PREFIX} bash ./scripts/test_updates_pg11.sh

    # This tests the ability to upgrade to the latest version on pg 12
    - if: (type = pull_request) OR (type = cron) OR (branch = prerelease_test)
      stage: test
      env: PG_VERSION=12.0
      name: "Update tests PostgreSQL 12.0"
      before_install:
      install:
      after_failure:
      after_script:
      after_success:
      script:
        - ${RETRY_PREFIX} bash ./scripts/test_updates_pg12.sh

    - if: (type = cron) OR (branch = prerelease_test)
      stage: test
      name: "ABI breakage smoketest 11.0"
      before_install:
      install:
      after_failure:
      after_script:
      script:
        - PG_MAJOR=11 PG_MINOR_COMPILE=0 bash -x ./scripts/docker-run-abi-test.sh

    - if: (type = cron) OR (branch = prerelease_test)
      stage: test
      name: "ABI breakage smoketest 12.0"
      before_install:
      install:
      after_failure:
      after_script:
      script:
        - PG_MAJOR=12 PG_MINOR_COMPILE=0 bash -x ./scripts/docker-run-abi-test.sh

    # Memory spike test when running out of order random inserts into timescaledb database
    - if: (type = cron) OR (branch = prerelease_test)
      stage: test
      name: "Memory leak on insert tests"
      before_install:
      install:
      after_failure:
      after_success:
      after_script:
      env:
        - PG_VERSION=12.3
      before_script:
      script:
        - bash ./scripts/docker-run-memory-test.sh

    # Sanitizer tests
    - if: (type = cron) OR (branch = prerelease_test)
      stage: test
      name: "ASAN and UBSAN tests"
      before_install:
      install:
      after_failure:
      before_script:
      script:
        # TEST_MAX specifies the maximum test # to go up to
        - TIMESCALE_DIR=$TRAVIS_BUILD_DIR bash ./scripts/test_sanitizers.sh
      after_script:
        - kill $(jobs -p) # kill job that prints repeatedly

    # Coverity tests

    - if: (branch = coverity_scan) OR (branch = coverity_scan_11)
      stage: coverity
      name: "Coverity PG 11"
      env:
      before_install:
        - sudo apt-get install -y postgresql-11 postgresql-client-11 postgresql-contrib-11 postgresql-server-dev-11 cmake
      install:
      after_success:
      after_script:
      script: echo "Success"
      addons:
        postgresql: "11"
        coverity_scan:
          project:
            name: "timescale/timescaledb"
            description: "TimescaledDB an open-source time-series DB"
          notification_email: ci@timescale.com
          build_command_prepend: "./bootstrap -DCMAKE_BUILD_TYPE=Debug -DREGRESS_CHECKS=OFF && cd build"
          build_command: "make"
          branch_pattern: coverity_scan|coverity_scan_11

    - if: (branch = coverity_scan) OR (branch = coverity_scan_12)
      stage: coverity
      name: "Coverity PG 12"
      env:
      before_install:
        - sudo apt-get install -y postgresql-12 postgresql-client-12 postgresql-contrib-12 postgresql-server-dev-12 cmake
      install:
      after_success:
      after_script:
      script: echo "Success"
      addons:
        postgresql: "12"
        coverity_scan:
          project:
            name: "timescale/timescaledb"
            description: "TimescaledDB an open-source time-series DB"
          notification_email: ci@timescale.com
          build_command_prepend: "./bootstrap -DCMAKE_BUILD_TYPE=Debug -DREGRESS_CHECKS=OFF && cd build"
          build_command: "make"
          branch_pattern: coverity_scan|coverity_scan_12
